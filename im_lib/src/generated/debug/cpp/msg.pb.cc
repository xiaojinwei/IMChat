// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* Head_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Head_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_msg_2eproto() {
  protobuf_AddDesc_msg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg.proto");
  GOOGLE_CHECK(file != NULL);
  Msg_descriptor_ = file->message_type(0);
  static const int Msg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, body_),
  };
  Msg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Msg_descriptor_,
      Msg::default_instance_,
      Msg_offsets_,
      -1,
      -1,
      -1,
      sizeof(Msg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, _is_default_instance_));
  Head_descriptor_ = file->message_type(1);
  static const int Head_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Head, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Head, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Head, msgcontenttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Head, fromid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Head, toid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Head, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Head, statusreport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Head, extend_),
  };
  Head_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Head_descriptor_,
      Head::default_instance_,
      Head_offsets_,
      -1,
      -1,
      -1,
      sizeof(Head),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Head, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Head, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Msg_descriptor_, &Msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Head_descriptor_, &Head::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_2eproto() {
  delete Msg::default_instance_;
  delete Msg_reflection_;
  delete Head::default_instance_;
  delete Head_reflection_;
}

void protobuf_AddDesc_msg_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_msg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tmsg.proto\"(\n\003Msg\022\023\n\004head\030\001 \001(\0132\005.Head\022"
    "\014\n\004body\030\002 \001(\t\"\225\001\n\004Head\022\r\n\005msgId\030\001 \001(\t\022\017\n"
    "\007msgType\030\002 \001(\005\022\026\n\016msgContentType\030\003 \001(\005\022\016"
    "\n\006fromId\030\004 \001(\t\022\014\n\004toId\030\005 \001(\t\022\021\n\ttimestam"
    "p\030\006 \001(\003\022\024\n\014statusReport\030\007 \001(\005\022\016\n\006extend\030"
    "\010 \001(\tB%\n\022com.cj.im.protobufB\017MessageProt"
    "obufb\006proto3", 252);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg.proto", &protobuf_RegisterTypes);
  Msg::default_instance_ = new Msg();
  Head::default_instance_ = new Head();
  Msg::default_instance_->InitAsDefaultInstance();
  Head::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_2eproto {
  StaticDescriptorInitializer_msg_2eproto() {
    protobuf_AddDesc_msg_2eproto();
  }
} static_descriptor_initializer_msg_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Msg::kHeadFieldNumber;
const int Msg::kBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Msg::Msg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Msg)
}

void Msg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  head_ = const_cast< ::Head*>(&::Head::default_instance());
}

Msg::Msg(const Msg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Msg)
}

void Msg::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  head_ = NULL;
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Msg::~Msg() {
  // @@protoc_insertion_point(destructor:Msg)
  SharedDtor();
}

void Msg::SharedDtor() {
  body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete head_;
  }
}

void Msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_descriptor_;
}

const Msg& Msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Msg* Msg::default_instance_ = NULL;

Msg* Msg::New(::google::protobuf::Arena* arena) const {
  Msg* n = new Msg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Msg::Clear() {
// @@protoc_insertion_point(message_clear_start:Msg)
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Msg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Head head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_body;
        break;
      }

      // optional string body = 2;
      case 2: {
        if (tag == 18) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_body()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->body().data(), this->body().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Msg.body"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Msg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Msg)
  return false;
#undef DO_
}

void Msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Msg)
  // optional .Head head = 1;
  if (this->has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->head_, output);
  }

  // optional string body = 2;
  if (this->body().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->body().data(), this->body().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Msg.body");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->body(), output);
  }

  // @@protoc_insertion_point(serialize_end:Msg)
}

::google::protobuf::uint8* Msg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Msg)
  // optional .Head head = 1;
  if (this->has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->head_, false, target);
  }

  // optional string body = 2;
  if (this->body().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->body().data(), this->body().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Msg.body");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->body(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Msg)
  return target;
}

int Msg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Msg)
  int total_size = 0;

  // optional .Head head = 1;
  if (this->has_head()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  // optional string body = 2;
  if (this->body().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->body());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Msg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Msg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Msg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Msg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Msg)
    MergeFrom(*source);
  }
}

void Msg::MergeFrom(const Msg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Msg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_head()) {
    mutable_head()->::Head::MergeFrom(from.head());
  }
  if (from.body().size() > 0) {

    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
}

void Msg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg::CopyFrom(const Msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg::IsInitialized() const {

  return true;
}

void Msg::Swap(Msg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Msg::InternalSwap(Msg* other) {
  std::swap(head_, other->head_);
  body_.Swap(&other->body_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_descriptor_;
  metadata.reflection = Msg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Msg

// optional .Head head = 1;
bool Msg::has_head() const {
  return !_is_default_instance_ && head_ != NULL;
}
void Msg::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
const ::Head& Msg::head() const {
  // @@protoc_insertion_point(field_get:Msg.head)
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
::Head* Msg::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::Head;
  }
  // @@protoc_insertion_point(field_mutable:Msg.head)
  return head_;
}
::Head* Msg::release_head() {
  // @@protoc_insertion_point(field_release:Msg.head)
  
  ::Head* temp = head_;
  head_ = NULL;
  return temp;
}
void Msg::set_allocated_head(::Head* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Msg.head)
}

// optional string body = 2;
void Msg::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Msg::body() const {
  // @@protoc_insertion_point(field_get:Msg.body)
  return body_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Msg::set_body(const ::std::string& value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Msg.body)
}
 void Msg::set_body(const char* value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Msg.body)
}
 void Msg::set_body(const char* value, size_t size) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Msg.body)
}
 ::std::string* Msg::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:Msg.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Msg::release_body() {
  // @@protoc_insertion_point(field_release:Msg.body)
  
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Msg::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:Msg.body)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Head::kMsgIdFieldNumber;
const int Head::kMsgTypeFieldNumber;
const int Head::kMsgContentTypeFieldNumber;
const int Head::kFromIdFieldNumber;
const int Head::kToIdFieldNumber;
const int Head::kTimestampFieldNumber;
const int Head::kStatusReportFieldNumber;
const int Head::kExtendFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Head::Head()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Head)
}

void Head::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Head::Head(const Head& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Head)
}

void Head::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgtype_ = 0;
  msgcontenttype_ = 0;
  fromid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  toid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = GOOGLE_LONGLONG(0);
  statusreport_ = 0;
  extend_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Head::~Head() {
  // @@protoc_insertion_point(destructor:Head)
  SharedDtor();
}

void Head::SharedDtor() {
  msgid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fromid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  toid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extend_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Head::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Head::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Head_descriptor_;
}

const Head& Head::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Head* Head::default_instance_ = NULL;

Head* Head::New(::google::protobuf::Arena* arena) const {
  Head* n = new Head;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Head::Clear() {
// @@protoc_insertion_point(message_clear_start:Head)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Head, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Head*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(msgtype_, msgcontenttype_);
  msgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  toid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = GOOGLE_LONGLONG(0);
  statusreport_ = 0;
  extend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Head::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Head)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msgid().data(), this->msgid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Head.msgId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msgType;
        break;
      }

      // optional int32 msgType = 2;
      case 2: {
        if (tag == 16) {
         parse_msgType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgtype_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_msgContentType;
        break;
      }

      // optional int32 msgContentType = 3;
      case 3: {
        if (tag == 24) {
         parse_msgContentType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgcontenttype_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_fromId;
        break;
      }

      // optional string fromId = 4;
      case 4: {
        if (tag == 34) {
         parse_fromId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fromid().data(), this->fromid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Head.fromId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_toId;
        break;
      }

      // optional string toId = 5;
      case 5: {
        if (tag == 42) {
         parse_toId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_toid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->toid().data(), this->toid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Head.toId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_timestamp;
        break;
      }

      // optional int64 timestamp = 6;
      case 6: {
        if (tag == 48) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_statusReport;
        break;
      }

      // optional int32 statusReport = 7;
      case 7: {
        if (tag == 56) {
         parse_statusReport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statusreport_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_extend;
        break;
      }

      // optional string extend = 8;
      case 8: {
        if (tag == 66) {
         parse_extend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extend()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->extend().data(), this->extend().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Head.extend"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Head)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Head)
  return false;
#undef DO_
}

void Head::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Head)
  // optional string msgId = 1;
  if (this->msgid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msgid().data(), this->msgid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Head.msgId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->msgid(), output);
  }

  // optional int32 msgType = 2;
  if (this->msgtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->msgtype(), output);
  }

  // optional int32 msgContentType = 3;
  if (this->msgcontenttype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->msgcontenttype(), output);
  }

  // optional string fromId = 4;
  if (this->fromid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fromid().data(), this->fromid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Head.fromId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->fromid(), output);
  }

  // optional string toId = 5;
  if (this->toid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->toid().data(), this->toid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Head.toId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->toid(), output);
  }

  // optional int64 timestamp = 6;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->timestamp(), output);
  }

  // optional int32 statusReport = 7;
  if (this->statusreport() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->statusreport(), output);
  }

  // optional string extend = 8;
  if (this->extend().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->extend().data(), this->extend().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Head.extend");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->extend(), output);
  }

  // @@protoc_insertion_point(serialize_end:Head)
}

::google::protobuf::uint8* Head::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Head)
  // optional string msgId = 1;
  if (this->msgid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msgid().data(), this->msgid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Head.msgId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgid(), target);
  }

  // optional int32 msgType = 2;
  if (this->msgtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->msgtype(), target);
  }

  // optional int32 msgContentType = 3;
  if (this->msgcontenttype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->msgcontenttype(), target);
  }

  // optional string fromId = 4;
  if (this->fromid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fromid().data(), this->fromid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Head.fromId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->fromid(), target);
  }

  // optional string toId = 5;
  if (this->toid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->toid().data(), this->toid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Head.toId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->toid(), target);
  }

  // optional int64 timestamp = 6;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->timestamp(), target);
  }

  // optional int32 statusReport = 7;
  if (this->statusreport() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->statusreport(), target);
  }

  // optional string extend = 8;
  if (this->extend().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->extend().data(), this->extend().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Head.extend");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->extend(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Head)
  return target;
}

int Head::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Head)
  int total_size = 0;

  // optional string msgId = 1;
  if (this->msgid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msgid());
  }

  // optional int32 msgType = 2;
  if (this->msgtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->msgtype());
  }

  // optional int32 msgContentType = 3;
  if (this->msgcontenttype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->msgcontenttype());
  }

  // optional string fromId = 4;
  if (this->fromid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fromid());
  }

  // optional string toId = 5;
  if (this->toid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->toid());
  }

  // optional int64 timestamp = 6;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // optional int32 statusReport = 7;
  if (this->statusreport() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->statusreport());
  }

  // optional string extend = 8;
  if (this->extend().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->extend());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Head::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Head)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Head* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Head>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Head)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Head)
    MergeFrom(*source);
  }
}

void Head::MergeFrom(const Head& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Head)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.msgid().size() > 0) {

    msgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msgid_);
  }
  if (from.msgtype() != 0) {
    set_msgtype(from.msgtype());
  }
  if (from.msgcontenttype() != 0) {
    set_msgcontenttype(from.msgcontenttype());
  }
  if (from.fromid().size() > 0) {

    fromid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fromid_);
  }
  if (from.toid().size() > 0) {

    toid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.toid_);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.statusreport() != 0) {
    set_statusreport(from.statusreport());
  }
  if (from.extend().size() > 0) {

    extend_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extend_);
  }
}

void Head::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Head)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Head::CopyFrom(const Head& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Head)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Head::IsInitialized() const {

  return true;
}

void Head::Swap(Head* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Head::InternalSwap(Head* other) {
  msgid_.Swap(&other->msgid_);
  std::swap(msgtype_, other->msgtype_);
  std::swap(msgcontenttype_, other->msgcontenttype_);
  fromid_.Swap(&other->fromid_);
  toid_.Swap(&other->toid_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(statusreport_, other->statusreport_);
  extend_.Swap(&other->extend_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Head::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Head_descriptor_;
  metadata.reflection = Head_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Head

// optional string msgId = 1;
void Head::clear_msgid() {
  msgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Head::msgid() const {
  // @@protoc_insertion_point(field_get:Head.msgId)
  return msgid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Head::set_msgid(const ::std::string& value) {
  
  msgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Head.msgId)
}
 void Head::set_msgid(const char* value) {
  
  msgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Head.msgId)
}
 void Head::set_msgid(const char* value, size_t size) {
  
  msgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Head.msgId)
}
 ::std::string* Head::mutable_msgid() {
  
  // @@protoc_insertion_point(field_mutable:Head.msgId)
  return msgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Head::release_msgid() {
  // @@protoc_insertion_point(field_release:Head.msgId)
  
  return msgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Head::set_allocated_msgid(::std::string* msgid) {
  if (msgid != NULL) {
    
  } else {
    
  }
  msgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgid);
  // @@protoc_insertion_point(field_set_allocated:Head.msgId)
}

// optional int32 msgType = 2;
void Head::clear_msgtype() {
  msgtype_ = 0;
}
 ::google::protobuf::int32 Head::msgtype() const {
  // @@protoc_insertion_point(field_get:Head.msgType)
  return msgtype_;
}
 void Head::set_msgtype(::google::protobuf::int32 value) {
  
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:Head.msgType)
}

// optional int32 msgContentType = 3;
void Head::clear_msgcontenttype() {
  msgcontenttype_ = 0;
}
 ::google::protobuf::int32 Head::msgcontenttype() const {
  // @@protoc_insertion_point(field_get:Head.msgContentType)
  return msgcontenttype_;
}
 void Head::set_msgcontenttype(::google::protobuf::int32 value) {
  
  msgcontenttype_ = value;
  // @@protoc_insertion_point(field_set:Head.msgContentType)
}

// optional string fromId = 4;
void Head::clear_fromid() {
  fromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Head::fromid() const {
  // @@protoc_insertion_point(field_get:Head.fromId)
  return fromid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Head::set_fromid(const ::std::string& value) {
  
  fromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Head.fromId)
}
 void Head::set_fromid(const char* value) {
  
  fromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Head.fromId)
}
 void Head::set_fromid(const char* value, size_t size) {
  
  fromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Head.fromId)
}
 ::std::string* Head::mutable_fromid() {
  
  // @@protoc_insertion_point(field_mutable:Head.fromId)
  return fromid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Head::release_fromid() {
  // @@protoc_insertion_point(field_release:Head.fromId)
  
  return fromid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Head::set_allocated_fromid(::std::string* fromid) {
  if (fromid != NULL) {
    
  } else {
    
  }
  fromid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fromid);
  // @@protoc_insertion_point(field_set_allocated:Head.fromId)
}

// optional string toId = 5;
void Head::clear_toid() {
  toid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Head::toid() const {
  // @@protoc_insertion_point(field_get:Head.toId)
  return toid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Head::set_toid(const ::std::string& value) {
  
  toid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Head.toId)
}
 void Head::set_toid(const char* value) {
  
  toid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Head.toId)
}
 void Head::set_toid(const char* value, size_t size) {
  
  toid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Head.toId)
}
 ::std::string* Head::mutable_toid() {
  
  // @@protoc_insertion_point(field_mutable:Head.toId)
  return toid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Head::release_toid() {
  // @@protoc_insertion_point(field_release:Head.toId)
  
  return toid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Head::set_allocated_toid(::std::string* toid) {
  if (toid != NULL) {
    
  } else {
    
  }
  toid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), toid);
  // @@protoc_insertion_point(field_set_allocated:Head.toId)
}

// optional int64 timestamp = 6;
void Head::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Head::timestamp() const {
  // @@protoc_insertion_point(field_get:Head.timestamp)
  return timestamp_;
}
 void Head::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:Head.timestamp)
}

// optional int32 statusReport = 7;
void Head::clear_statusreport() {
  statusreport_ = 0;
}
 ::google::protobuf::int32 Head::statusreport() const {
  // @@protoc_insertion_point(field_get:Head.statusReport)
  return statusreport_;
}
 void Head::set_statusreport(::google::protobuf::int32 value) {
  
  statusreport_ = value;
  // @@protoc_insertion_point(field_set:Head.statusReport)
}

// optional string extend = 8;
void Head::clear_extend() {
  extend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Head::extend() const {
  // @@protoc_insertion_point(field_get:Head.extend)
  return extend_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Head::set_extend(const ::std::string& value) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Head.extend)
}
 void Head::set_extend(const char* value) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Head.extend)
}
 void Head::set_extend(const char* value, size_t size) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Head.extend)
}
 ::std::string* Head::mutable_extend() {
  
  // @@protoc_insertion_point(field_mutable:Head.extend)
  return extend_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Head::release_extend() {
  // @@protoc_insertion_point(field_release:Head.extend)
  
  return extend_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Head::set_allocated_extend(::std::string* extend) {
  if (extend != NULL) {
    
  } else {
    
  }
  extend_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extend);
  // @@protoc_insertion_point(field_set_allocated:Head.extend)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
